#!/usr/bin/env python

import argparse
import os
import json
import logging

from obspy import read

from gmprocess.io import fdsn
from gmprocess.logging import setup_logger
from gmprocess.args import add_shared_args
from gmprocess.config import get_config


CONFIG = get_config()
TIMEFMT = '%Y-%m-%dT%H:%M:%S'


def main(args):
    conf_org = CONFIG['origin']
    conf_req = CONFIG['waveform_request']
    setup_logger(args)
    save_format = conf_req['format']
    logging.info("Running fdsnfetch2.")

    # Request waveforms using parameters, getting stream and inventory
    st, inv = fdsn.request_raw_waveforms(
        conf_req['client'],
        conf_org['event_time'].strftime(TIMEFMT),
        conf_org['event_lat'],
        conf_org['event_lon'],
        conf_req['before_time'],
        conf_req['after_time'],
        conf_req['dist_min'],
        conf_req['dist_max'],
        conf_req['networks'],
        conf_req['stations'],
        conf_req['channels'])

    raw_dir = os.path.join(args.out, 'raw')
    if not os.path.exists(raw_dir):
        os.mkdir(raw_dir)

    # Write the raw files to the raw directory
    for tr in st:
        tr = fdsn.add_channel_metadata(
            tr, inv, conf_req['client'])
        raw_file = os.path.join(
            args.out, 'raw', tr.get_id() + '.' + save_format)
        tr.write(raw_file, format=save_format)

    # Get a list of the stations that we have waveform data for
    stations = []
    pattern = '*.%s' % save_format
    raw_st = read(os.path.join(args.out, 'raw', pattern))
    for tr in raw_st:
        if tr.stats.station not in stations:
            stations.append(tr.stats.station)

    # Save the JSON metadata for each station
    for stn in stations:
        meta_dict = {}
        meta_dict['properties'] = {}
        stn_st = st.select(station=stn)
        for tr in stn_st:
            stats = fdsn.clean_stats(tr.stats)
            meta_dict['properties'][tr.stats.channel] = fdsn.clean_stats(stats)
        for tr in stn_st:
            json_file = os.path.join(
                args.out, 'raw', tr.get_id() + '.json')
            with open(json_file, 'w') as fp:
                json.dump(meta_dict, fp)


if __name__ == '__main__':
    desc = 'Fetch data from an FDSN client.'
    parser = argparse.ArgumentParser(description=desc)

    # Required arguments
    parser.add_argument(
        'out', help='Output file directory', type=str)
    parser.add_argument(
        'org_time', help='Event origin time', type=str)
    parser.add_argument(
        'lat', help='Event latitude', type=float)
    parser.add_argument(
        'lon', help='Event longitude', type=float)

    # Shared arguments
    parser = add_shared_args(parser)

    pargs = parser.parse_args()
    main(pargs)
