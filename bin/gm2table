#!/usr/bin/env python

# stdlib imports
import os.path
import argparse
import logging

# local imports
from gmprocess.config import get_config
from gmprocess.stream import directory_to_dataframe
from gmprocess.logging import setup_logger
from gmprocess.args import add_shared_args


FORMATS = ['csv', 'xlsx']
CONFIG = get_config()


def main(args):
    setup_logger(args)
    logging.info("Running gm2table.")

    # gather arguments
    directory = args.directory
    outfile = args.outfile
    format = args.format
    epi_dist = args.distance
    event_time = args.event_time
    lat = args.lat
    lon = args.lon
    process = args.process
    imcs = CONFIG['output_imcs']['list']
    imts = CONFIG['output_imts'][CONFIG['output_imts']['list']]

    if not os.path.isdir(directory):
        raise Exception('Input directory does not exist.')
    dataframe = directory_to_dataframe(directory, imcs=imcs, imts=imts,
        epi_dist=epi_dist, event_time=event_time, lat=lat, lon=lon,
        process=process)
    if format == 'csv':
        dataframe.to_csv(outfile, index=False)
    elif format == 'xlsx':
        dataframe.to_excel(outfile)


if __name__ == '__main__':
    desc = '''Create an Excel or CSV file of peak ground motions from a directory of files
    '''
    parser = argparse.ArgumentParser(
        description=desc,
        formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument(
        'directory', help='Directory ground motion data.')
    parser.add_argument(
        'outfile', help='Output file.')
    parser.add_argument(
        '-f', '--format',
        help='Output file format (csv or excel). Default is xlsx.',
        choices=FORMATS, default='csv')
    parser.add_argument(
        '--distance',
        help='Epicentral distance to station. This is used for processing.',
        default=None)
    parser.add_argument(
        '-v', '--event-time',
        help='Time of the event. This is used for processing.',
        default=None)
    parser.add_argument(
        '--lat',
        help='Epicentral latitude. This is used to calculate distances.',
        default=None)
    parser.add_argument(
        '--lon',
        help='Epicentral longitude. This is used to calculate distances.',
        default=None)
    parser.add_argument(
        '-p', '--process',
        help='Process the streams. Default is True.',
        default=True)

    # Shared arguments
    parser = add_shared_args(parser)

    pargs = parser.parse_args()

    main(pargs)
