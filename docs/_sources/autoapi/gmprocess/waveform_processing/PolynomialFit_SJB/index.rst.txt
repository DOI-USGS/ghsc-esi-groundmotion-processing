:py:mod:`gmprocess.waveform_processing.PolynomialFit_SJB`
=========================================================

.. py:module:: gmprocess.waveform_processing.PolynomialFit_SJB


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   gmprocess.waveform_processing.PolynomialFit_SJB.PolynomialFit_SJB
   gmprocess.waveform_processing.PolynomialFit_SJB.__ridder_log
   gmprocess.waveform_processing.PolynomialFit_SJB.MAX
   gmprocess.waveform_processing.PolynomialFit_SJB.filtered_Facc
   gmprocess.waveform_processing.PolynomialFit_SJB.get_residual



.. py:function:: PolynomialFit_SJB(st, target=0.02, tol=0.001, polynomial_order=6.0, maxiter=30, maxfc=0.5, config=None)

   Search for highpass corner using Ridder's method.

   Search such that the criterion that the ratio between the maximum of a third order
   polynomial fit to the displacement time series and the maximum of the displacement
   timeseries is a target % within a tolerance.

   This algorithm searches between a low initial corner frequency a maximum fc.

   Method developed originally by Scott Brandenberg

   :param st: Stream of data.
   :type st: StationStream
   :param target: target percentage for ratio between max polynomial value and max
                  displacement.
   :type target: float
   :param tol: tolereance for matching the ratio target
   :type tol: float
   :param polynomial_order: order of polynomial to fit to displacement time series.
   :type polynomial_order: float
   :param maxiter: maximum number of allowed iterations in Ridder's method
   :type maxiter: float
   :param maxfc: Maximum allowable value of the highpass corner freq.
   :type maxfc: float
   :param int_method: method used to perform integration between acceleration, velocity, and
                      dispacement. Options are "frequency_domain", "time_domain_zero_init" or
                      "time_domain_zero_mean"
   :type int_method: string
   :param config: Configuration dictionary (or None). See get_config().
   :type config: dict

   :returns: StationStream.


.. py:function:: __ridder_log(tr, f_hp, target=0.02, tol=0.001, polynomial_order=6, maxiter=30, maxfc=0.5, config=None)


.. py:function:: MAX(vx)


.. py:function:: filtered_Facc(Facc, freq, fc, order)


.. py:function:: get_residual(time, disp, target, polynomial_order)


