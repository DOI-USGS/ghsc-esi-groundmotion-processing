:py:mod:`gmprocess.waveform_processing.processing`
==================================================

.. py:module:: gmprocess.waveform_processing.processing

.. autoapi-nested-parse::

   Processing methods.



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   gmprocess.waveform_processing.processing.process_streams
   gmprocess.waveform_processing.processing._add_step_arg



Attributes
~~~~~~~~~~

.. autoapisummary::

   gmprocess.waveform_processing.processing.all_processing_steps
   gmprocess.waveform_processing.processing.REQ_ORIGIN


.. py:data:: all_processing_steps
   

   

.. py:data:: REQ_ORIGIN
   :annotation: = ['fit_spectra', 'trim_multiple_events', 'check_clipping', 'get_corner_frequencies']

   

.. py:function:: process_streams(streams, origin, config=None, old_streams=None)

   Run processing steps from the config file.

   This method looks in the 'processing' config section and loops over those
   steps and hands off the config options to the appropriate prcessing method.
   Streams that fail any of the tests are kepth in the StreamCollection but
   the parameter 'passed_checks' is set to False and subsequent processing
   steps are not applied once a check has failed.

   :param streams: A StreamCollection object of unprocessed streams.
   :type streams: StreamCollection
   :param origin: ScalarEvent object.
   :type origin: ScalarEvent
   :param config: Configuration dictionary (or None). See get_config().
   :type config: dict
   :param old_streams: A StreamCollection object of previously processed streams that contain
                       manually reviewed information. None if not reprocessing.
   :type old_streams: StreamCollection

   :returns: A StreamCollection object.


.. py:function:: _add_step_arg(step_args, key, val)


