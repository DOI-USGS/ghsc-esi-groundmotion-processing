:py:mod:`gmprocess.waveform_processing.instrument_response`
===========================================================

.. py:module:: gmprocess.waveform_processing.instrument_response

.. autoapi-nested-parse::

   Methods for handling instrument response.



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   gmprocess.waveform_processing.instrument_response.remove_response



Attributes
~~~~~~~~~~

.. autoapisummary::

   gmprocess.waveform_processing.instrument_response.ABBREV_UNITS
   gmprocess.waveform_processing.instrument_response.M_TO_CM


.. py:data:: ABBREV_UNITS
   

   

.. py:data:: M_TO_CM
   :annotation: = 100.0

   

.. py:function:: remove_response(st, pre_filt=True, f1=0.001, f2=0.005, f3=None, f4=None, water_level=60, inv=None, config=None)

   Performs instrument response correction. If the response information is
   not already attached to the stream, then an inventory object must be
   provided. If the instrument is a strong-motion accelerometer, then
   tr.remove_sensitivity() will be used. High-gain seismometers will use
   tr.remove_response() with the defined pre-filter and water level.

   If f3 is Null it will be set to 0.9*fn, if f4 is Null it will be set to fn.

   :param st: Stream of data.
   :type st: StationStream
   :param pre_filt: Apply a bandpass filter in frequency domain to the data before
                    deconvolution?
   :type pre_filt: bool
   :param f1: Frequency 1 for pre-filter.
   :type f1: float
   :param f2: Frequency 2 for pre-filter.
   :type f2: float
   :param f3: Frequency 3 for pre-filter.
   :type f3: float
   :param f4: Frequency 4 for pre-filter.
   :type f4: float
   :param water_level: Water level for deconvolution.
   :type water_level: float
   :param inv: Obspy inventory object containing response information.
   :type inv: obspy.core.inventory.inventory
   :param config: Configuration dictionary (or None). See get_config().
   :type config: dict

   :returns: Instrument-response-corrected stream.
   :rtype: StationStream


