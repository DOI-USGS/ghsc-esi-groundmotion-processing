:mod:`gmprocess.io.fetch_utils`
===============================

.. py:module:: gmprocess.io.fetch_utils


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   gmprocess.io.fetch_utils.download
   gmprocess.io.fetch_utils.parse_event_file
   gmprocess.io.fetch_utils.draw_stations_map
   gmprocess.io.fetch_utils.get_event_files
   gmprocess.io.fetch_utils.read_event_json_files
   gmprocess.io.fetch_utils.get_events
   gmprocess.io.fetch_utils.events_from_directory
   gmprocess.io.fetch_utils.create_event_file
   gmprocess.io.fetch_utils.get_rawdir
   gmprocess.io.fetch_utils.save_shakemap_amps
   gmprocess.io.fetch_utils.create_json
   gmprocess.io.fetch_utils._get_cosmos_code
   gmprocess.io.fetch_utils.get_shakemap_json
   gmprocess.io.fetch_utils.update_config
   gmprocess.io.fetch_utils.plot_raw
   gmprocess.io.fetch_utils.get_rupture_file
   gmprocess.io.fetch_utils.get_station_feature
   gmprocess.io.fetch_utils.get_components
   gmprocess.io.fetch_utils.replace_nan


.. data:: TIMEFMT2
   :annotation: = %Y-%m-%dT%H:%M:%S.%f

   

.. data:: OCEAN_COLOR
   :annotation: = #96e8ff

   

.. data:: LAND_COLOR
   :annotation: = #ededaf

   

.. data:: PASSED_COLOR
   :annotation: = #00ac00

   

.. data:: FAILED_COLOR
   :annotation: = #ff2222

   

.. data:: MAP_PADDING
   :annotation: = 1.1

   

.. data:: UNITS
   

   

.. data:: FLOAT_PATTERN
   :annotation: = [-+]?[0-9]*\.?[0-9]+

   

.. function:: download(event, event_dir, config, directory, create_workspace=True, stream_collection=True)

   Download data or load data from local directory, turn into Streams.

   :param event: Object containing basic event hypocenter, origin time, magnitude.
   :type event: ScalarEvent
   :param event_dir: Path where raw directory should be created (if downloading).
   :type event_dir: str
   :param config: Dictionary with gmprocess configuration information.
   :type config: dict
   :param directory: Path where data already exists. Must be organized in a 'raw'
                     directory, within directories with names as the event ids. For
                     example, if `directory` is 'proj_dir' and you have data for
                     event id 'abc123' then the raw data to be read in should be
                     located in `proj_dir/abc123/raw/`.
   :type directory: str
   :param create_workspace: Create workspace file?
   :type create_workspace: bool
   :param stream_collection: Construct and return a StreamCollection instance?
   :type stream_collection: bool

   :returns:     - StreamWorkspace: Contains the event and raw streams.
                 - str: Name of workspace HDF file.
                 - StreamCollection: Raw data StationStreams.
                 - str: Path to the rupture file.
   :rtype: tuple


.. function:: parse_event_file(eventfile)

   Parse text file containing basic event information.

   Files can contain:
       - one column, in which case that column
         contains ComCat event IDs.
       - Seven columns, in which case those columns should be:
         - id: any string (no spaces)
         - time: Any ISO standard for date/time.
         - lat: Earthquake latitude in decimal degrees.
         - lon: Earthquake longitude in decimal degrees.
         - depth: Earthquake longitude in kilometers.
         - magnitude: Earthquake magnitude.
         - magnitude_type: Earthquake magnitude type.

   NB: THERE SHOULD NOT BE ANY HEADERS ON THIS FILE!

   :param eventfile: Path to event text file
   :type eventfile: str

   :returns: ScalarEvent objects constructed from list of event information.
   :rtype: list


.. function:: draw_stations_map(pstreams, event, event_dir)


.. function:: get_event_files(directory)

   Get list of event.json files found underneath a data directory.

   :param directory: Path to directory containing input raw data, where
                     subdirectories must be event directories containing
                     event.json files, where the id in that file matches
                     the directory under which it is found.
   :type directory: str

   :returns: List of event.json files.


.. function:: read_event_json_files(eventfiles)

   Read event.json file and return ScalarEvent object.

   :param eventfiles: Event.json files to be read.
   :type eventfiles: list

   :returns: ScalarEvent objects.
   :rtype: list


.. function:: get_events(eventids, textfile, eventinfo, directory, outdir=None)

   Find the list of events.

   :param eventids: List of ComCat event IDs.
   :type eventids: list or None
   :param textfile: Path to text file containing event IDs or info.
   :type textfile: str or None
   :param eventinfo:
                     List containing:
                         - id Any string, no spaces.
                         - time Any ISO-compatible date/time string.
                         - latitude Latitude in decimal degrees.
                         - longitude Longitude in decimal degrees.
                         - depth Depth in kilometers.
                         - magnitude Earthquake magnitude.
                         - magnitude_type Earthquake magnitude type.
   :type eventinfo: list or None
   :param directory: Path to a directory containing event subdirectories, each
                     containing an event.json file, where the ID in the json file
                     matches the subdirectory containing it.
   :type directory: str
   :param outdir: Output directory.
   :type outdir: str

   :returns: ScalarEvent objects.
   :rtype: list


.. function:: events_from_directory(dir)


.. function:: create_event_file(event, event_dir)

   Write event.json file in event_dir.

   :param event: Input event object.
   :type event: ScalarEvent
   :param event_dir: Directory where event.json should be written.
   :type event_dir: str


.. function:: get_rawdir(event_dir)

   Find or create raw directory if necessary.

   :param event_dir: Directory where raw directory will be found or created.
   :type event_dir: str


.. function:: save_shakemap_amps(processed, event, event_dir)

   Write ShakeMap peak amplitudes to Excel file and ShakeMap JSON.

   :param processed: Processed waveforms.
   :type processed: StreamCollection
   :param event: Event object.
   :type event: ScalarEvent
   :param event_dir: Directory where peak amps should be written.
   :type event_dir: str

   :returns: Path to output amps spreadsheet.
   :rtype: str


.. function:: create_json(workspace, event, event_dir, label, config=None, expanded_imts=False)

   Create JSON file for ground motion parametric data.

   :param workspace: gmrpocess StreamWorkspace object.
   :type workspace: StreamWorkspace
   :param event: Event object.
   :type event: ScalarEvent
   :param event_dir: Event directory.
   :type event_dir: str
   :param label: Processing label.
   :type label: str
   :param config: Configuration options.
   :type config: dict
   :param expanded_imts: Use expanded IMTs. Currently this only means all the SA that have
                         been computed, plus PGA and PGV (if computed). Could eventually
                         expand for other IMTs also.
   :type expanded_imts: bool


.. function:: _get_cosmos_code(desc)


.. function:: get_shakemap_json(dataframe)


.. function:: update_config(custom_cfg_file)

   Merge custom config with default.

   :param custom_cfg_file: Path to custom config.
   :type custom_cfg_file: str

   :returns: Merged config dictionary.
   :rtype: dict


.. function:: plot_raw(rawdir, tcollection, event)

   Make PNG plots of a collection of raw waveforms.

   :param rawdir: Directory where PNG files should be saved.
   :type rawdir: str
   :param tcollection: Sequence of streams.
   :type tcollection: StreamCollection
   :param event: Event object.
   :type event: ScalarEvent


.. function:: get_rupture_file(event_dir)

   Get the path to the rupture file, or None if there is not rupture file.

   :param event_dir: Event directory.
   :type event_dir: str

   :returns: Path to the rupture file. Returns None if no rupture file exists.
   :rtype: str


.. function:: get_station_feature(stream, metrics, coordinates, expanded_imts=False)


.. function:: get_components(metrics, stream)


.. function:: replace_nan(properties)


